AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  (SO8029) GCR solution: Quantum Computing in HCLS

Parameters:
  NamePrefix:
    Type: String
    Default: HCLS

#  ImageUri:
#    Type: String
#    Default: 522244679887.dkr.ecr.us-east-1.amazonaws.com/qc-batch-experiment
#    "ImageUri": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/qc-batch-experiment:latest",


Resources:
  StepFuncsRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-${NamePrefix}-StepFuncsRole-${AWS::Region}
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: role-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "iam:PassRole"
                Resource: "*"

  SageMakerRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-${NamePrefix}-SageMakerRole-${AWS::Region}
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/PowerUserAccess

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-${NamePrefix}-LambdaRole-${AWS::Region}
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/PowerUserAccess

  SMProcessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFuncsRole.Arn
      StateMachineName: !Sub ${AWS::StackName}-${NamePrefix}-SMProcessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Run processing",
          "States": {
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::sagemaker:createProcessingJob.sync",
              "Parameters": {
                "AppSpecification": {
                  "ImageUri": "522244679887.dkr.ecr.${AWS::Region}.amazonaws.com/qc-batch-experiment:latest",
                  "ContainerArguments.$": "$.ContainerArguments"
                },
                "ProcessingResources": {
                  "ClusterConfig": {
                    "InstanceCount": 1,
                    "InstanceType.$": "$.InstanceType",
                    "VolumeSizeInGB": 5
                  }
                },
                "RoleArn": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWS::StackName}-${NamePrefix}-SageMakerRole-${AWS::Region}",
                "ProcessingJobName.$": "States.Format('{}', $$.Execution.Name)"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "ThrottlingException",
                    "SageMaker.AmazonSageMakerException"
                  ],
                  "IntervalSeconds": 6,
                  "MaxAttempts": 5,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "ProcessingJobName.$": "$.ProcessingJobName",
                "ProcessingJobStatus.$": "$.ProcessingJobStatus"
              },
              "ResultPath": "$.RunProcessing",
              "End": true
            }
          }
        }


##################
#__CONTENT__#
##################


  BatchExperiment:
    Type: AWS::StepFunctions::StateMachine
    DependsOn: AthenaTableLambda
    Properties:
      RoleArn: !GetAtt StepFuncsRole.Arn
      StateMachineName: !Sub ${AWS::StackName}-${NamePrefix}-BatchExperiment
      DefinitionString: !Sub |
        {
          "StartAt": "Batch Experiment",
          "States": {
            "Batch Experiment": {
              "Type": "Parallel",
              "Branches": [{
                  "StartAt": "Wait 1 Seconds",
                  "States": {
                    "Wait 1 Seconds": {
                      "Type": "Wait",
                      "Seconds": 1,
                      "Next": "M1"
                    },
                    "M1": {
                      "Type": "Task",
                      "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
                      "Parameters": {
                        "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-${NamePrefix}-M1"
                      },
                      "Next": "M4"
                    },

                    "M4": {
                      "Type": "Task",
                      "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
                      "Parameters": {
                        "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-${NamePrefix}-M4"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Wait 5 Seconds",
                  "States": {
                    "Wait 5 Seconds": {
                      "Type": "Wait",
                      "Seconds": 5,
                      "Next": "M2"
                    },
                    "M2": {
                      "Type": "Task",
                      "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
                      "Parameters": {
                        "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-${NamePrefix}-M2"
                      },
                      "Next": "M3"
                    },
                    "M3": {
                      "Type": "Task",
                      "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
                      "Parameters": {
                        "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-${NamePrefix}-M3"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "Import data to Athena"
            },
            "Import data to Athena": {
               "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${AWS::StackName}-${NamePrefix}-AthenaTableLambda"
              },
              "End": true
            }
          }
        }

#
# Lambda
#

  AthenaTableLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-${NamePrefix}-AthenaTableLambda
      Runtime: nodejs14.x
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      Description: Lambda funciton to create table qc_batch_performance_view
      Timeout: 300
      Environment:
        Variables:
          BUCKET: !Sub amazon-braket-gcrqc-${AWS::AccountId}-${AWS::Region}
      Code:
        ZipFile: |

          const AWS = require('aws-sdk')
          const client = new AWS.Athena({})
          const bucket = process.env.BUCKET


          exports.handler = function (event, context, callback) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
              const ATHENA_OUTPUT_LOCATION = `s3://${bucket}/query/`
              const location = `s3://${bucket}/annealer-experiment/metric/`
              const dropTableSql = "DROP TABLE IF EXISTS qc_batch_performance"

              const createTableSql = "CREATE EXTERNAL TABLE IF NOT EXISTS qc_batch_performance(\n" +
                  "\tM int,\n" +
                  "\tD int,\n" +
                  "\tDevice string,\n" +
                  "\tInstanceType string,\n" +
                  "\tComputeType string,\n" +
                  "\tMins float\n" +
                  ") ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n' LOCATION '" + location + "'"

              const createViewSql = "CREATE OR REPLACE VIEW qc_batch_performance_view as\n" +
                  "select M,\n" +
                  "\tD,\n" +
                  "\tDevice,\n" +
                  "\tInstanceType,\n" +
                  "\tComputeType,\n" +
                  "\tavg(mins) as mins\n" +
                  "from qc_batch_performance\n" +
                  "group by M,\n" +
                  "\tD,\n" +
                  "\tDevice,\n" +
                  "\tInstanceType,\n" +
                  "\tComputeType\n" +
                  "order by M,\n" +
                  "\tD,\n" +
                  "\tDevice,\n" +
                  "\tInstanceType,\n" +
                  "\tComputeType"

              const querySql = "SELECT * FROM qc_batch_performance_view"

              console.log("sql:" + dropTableSql)
              client.startQueryExecution({
                  QueryString: dropTableSql,
                  ResultConfiguration: {OutputLocation: ATHENA_OUTPUT_LOCATION},
              }, (error, results) => {
                  if (error) {
                      return callback(error)
                  } else {
                      console.info(results.QueryExecutionId)
                      setTimeout(() => {
                          client.startQueryExecution({
                              QueryString: createTableSql,
                              ResultConfiguration: {OutputLocation: ATHENA_OUTPUT_LOCATION},
                          }, (error, results) => {
                              if (error) {
                                  return callback(error)
                              } else {
                                  console.info(results.QueryExecutionId)
                                  setTimeout(() => {
                                      console.log("sql:" + createViewSql)
                                      client.startQueryExecution({
                                          QueryString: createViewSql,
                                          ResultConfiguration: {OutputLocation: ATHENA_OUTPUT_LOCATION},
                                      }, (error, results) => {
                                          if (error) {
                                              return callback(error)
                                          } else {
                                              console.info(results.QueryExecutionId)
                                              setTimeout(() => {
                                                  console.log("sql:" + querySql)
                                                  client.startQueryExecution({
                                                      QueryString: querySql,
                                                      ResultConfiguration: {OutputLocation: ATHENA_OUTPUT_LOCATION},
                                                  }, (error, results) => {
                                                      if (error) {
                                                          return callback(error)
                                                      } else {
                                                          console.info(results.QueryExecutionId)
                                                      }
                                                  })
                                              }, 10000)
                                          }
                                      })
                                  }, 10000)
                              }
                          })
                      }, 10000)
                  }
              })

              callback(null, {queryResult: ATHENA_OUTPUT_LOCATION})
          }



Outputs:
  BatchExperimentStepFunctions:
    Description: Batch Experiment StepFunctions
    Value: !Join ["", [!Sub "https://console.aws.amazon.com/states/home?region=${AWS::Region}", "#/statemachines/view/", !Ref BatchExperiment ]]

  M1StepFunctions:
    Description: M1 StepFunctions
    Value: !Join ["", [!Sub "https://console.aws.amazon.com/states/home?region=${AWS::Region}", "#/statemachines/view/", !Ref M1 ]]

  M2StepFunctions:
    Description: M2 StepFunctions
    Value: !Join ["", [!Sub "https://console.aws.amazon.com/states/home?region=${AWS::Region}", "#/statemachines/view/", !Ref M2 ]]

  M3StepFunctions:
    Description: M3 StepFunctions
    Value: !Join ["", [!Sub "https://console.aws.amazon.com/states/home?region=${AWS::Region}", "#/statemachines/view/", !Ref M3 ]]

  M4StepFunctions:
    Description: M4 StepFunctions
    Value: !Join ["", [!Sub "https://console.aws.amazon.com/states/home?region=${AWS::Region}", "#/statemachines/view/", !Ref M4 ]]